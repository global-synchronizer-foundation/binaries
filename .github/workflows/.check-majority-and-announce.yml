name: Check SVS majority and Announce

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      info_url:
        required: true
        type: string
      validator_operators_group_id:
        required: false
        type: string
        default: "133138"  # Default group ID for validator operators
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      GROUPS_IO_USER:
        required: true
      GROUPS_IO_PASS:
        required: true

permissions: {}

defaults:
  run:
    shell: bash --noprofile --norc -euo pipefail {0}  # GitHub default: bash --noprofile --norc -eo pipefail {0}

jobs:
  check-and-announce:
    runs-on: ubuntu-latest
    permissions:
      contents: write # Need to write to announce-tracking branch
      packages: write # Needed for Devnet only. Write to packages when copy images/charts from splice.
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: main

      - name: Checkout announce-tracking branch
        uses: actions/checkout@v4
        with:
          ref: announce-tracking
          path: tracking

      - name: Set variables and Get GSF version and docs path
        id: variables
        env:
          GSF_INFO_URL: ${{ inputs.info_url }}
          GSF_ENV: ${{ inputs.environment }}
        run: |
          GSF_VERSION=$(curl -sSm5 "$GSF_INFO_URL/info" | jq -r .sv.version)
          GSF_DOCS=$(echo "$GSF_INFO_URL" | sed 's/global\.canton\.network\.sync\.global$/sync.global/')
          echo "GSF_INFO_URL=$GSF_INFO_URL" >> $GITHUB_ENV
          echo "GSF_ENV=$GSF_ENV" >> $GITHUB_ENV
          echo "GSF_VERSION=$GSF_VERSION" >> $GITHUB_ENV
          echo "GSF_DOCS=$GSF_DOCS" >> $GITHUB_ENV

      - name: Run SVS majority check
        id: check-majority
        run: |
          result=$(./main/ci/check-svs-majority.sh "${GSF_ENV}" "${GSF_INFO_URL}")
          echo "$result"

          {
            echo '```'
            echo "$result"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Check if version already announced
        id: check-announced
        run: |
          ENV_LOWER=$(echo "${GSF_ENV}" | tr '[:upper:]' '[:lower:]')
          FILE="tracking/ci/announced-${ENV_LOWER}.txt"
          if [ -f "$FILE" ] && grep -qxF "${GSF_VERSION}" "$FILE"; then
            echo "already_announced=true" >> $GITHUB_OUTPUT
            echo "Version ${GSF_VERSION} has already been announced for ${GSF_ENV}." | \
              tee -a "$GITHUB_STEP_SUMMARY"
          else
            echo "already_announced=false" >> $GITHUB_OUTPUT
            echo "Version ${GSF_VERSION} has not been announced for ${GSF_ENV}." | \
              tee -a "$GITHUB_STEP_SUMMARY"
          fi

      # Copying binaries for DevNet only
      - name: Set up tools
        if: ${{ inputs.environment == 'DevNet' && steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y jq skopeo make
          curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 /tmp/get_helm.sh
          /tmp/get_helm.sh

      - name: Run copy-binaries Script
        if: ${{ inputs.environment == 'DevNet' && steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPO: ${{ github.repository }}
          GITHUB_ACTOR: ${{ github.actor }}
        run: |
          ./main/ci/gsf-copy-binaries.sh

      # Announcing the release for all environments
      - name: Announce the release to validator-operators
        if: steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false'
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 #v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "Splice release ${{ env.GSF_VERSION }} is ready for deployment on ${{ env.GSF_ENV }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: |
                    :tada: Splice release `${{ env.GSF_VERSION }}` is ready for deployment on ${{ env.GSF_ENV }}, and is available from the GSF
                    :ship: â…” of Super Validator nodes have upgraded to this release, including the GSF Super Validator node
                    *SV node status here*: https://sync.global/sv-network
                    *Release notes here*: ${{ env.GSF_DOCS }}/release_notes.html

      - name: Announce to validator-announce@lists.sync.global
        if: steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false'
        env:
          VALIDATOR_OPERATORS_GROUP_ID: ${{ inputs.validator_operators_group_id }}
          GROUPS_IO_USER: ${{ secrets.GROUPS_IO_USER }}
          GROUPS_IO_PASS: ${{ secrets.GROUPS_IO_PASS }}
        run: |
          trap 'rm -f password.txt cookies.txt message.html' EXIT

          curl_options=(-fsS)
          echo "password=$GROUPS_IO_PASS" > password.txt

          echo "Logging in to groups.io"
          LOGIN_RESPONSE_COOKIES=$(
            curl "${curl_options[@]}" -X POST \
              "https://lists.sync.global/api/v1/login" \
              -c "cookies.txt" \
              -d "email=$GROUPS_IO_USER" \
              -d @password.txt
          )

          CSRF_TOKEN=$(echo "$LOGIN_RESPONSE_COOKIES" | jq -er '.user.csrf_token')
          echo "CSRF Token: $CSRF_TOKEN"

          echo "Creating a new draft"
          DRAFT_ID=$(
            curl "${curl_options[@]}" -X POST \
              "https://lists.sync.global/api/v1/newdraft" \
              -b "cookies.txt" \
              -d "csrf=$CSRF_TOKEN" \
              -d "draft_type=draft_type_post" \
              -d "group_id=$VALIDATOR_OPERATORS_GROUP_ID" |
            jq -er '.id'
          )
          echo "Draft ID: $DRAFT_ID"

          VERSION=$GSF_VERSION ENVIRONMENT=$GSF_ENV DOCS=$GSF_DOCS envsubst < ./main/ci/splice_release_message.html.template > message.html

          echo "Updating draft with message content"
          curl "${curl_options[@]}" -X POST \
            "https://lists.sync.global/api/v1/updatedraft" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -b "cookies.txt" \
            -d "csrf=$CSRF_TOKEN" \
            -d "draft_id=$DRAFT_ID" \
            -d "group_id=$VALIDATOR_OPERATORS_GROUP_ID" \
            -d "subject=Splice release $GSF_VERSION is ready for deployment on $GSF_ENV" \
            --data-urlencode "body@message.html"

          echo "Posting the draft"
          curl "${curl_options[@]}" -X POST \
            "https://lists.sync.global/api/v1/postdraft" \
            -b "cookies.txt" \
            -d "csrf=$CSRF_TOKEN" \
            -d "draft_id=$DRAFT_ID" \
            -d "group_id=$VALIDATOR_OPERATORS_GROUP_ID"

      - name: Update announced version file
        if: steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false'
        shell: bash
        run: |
          cd tracking
          ENV_LOWER=$(echo "${GSF_ENV}" | tr '[:upper:]' '[:lower:]')
          FILE="./ci/announced-${ENV_LOWER}.txt"
          BRANCH="announce-tracking"
          MAX_RETRIES=5
          SLEEP_SEC=2

          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          COUNT=0
          SUCCESS=false

          while [ $COUNT -le $MAX_RETRIES ]; do
            echo "[INFO] Attempt $((COUNT + 1)) to rebase and push"
          
            git fetch origin "$BRANCH"
            git checkout -B "$BRANCH" "origin/$BRANCH"
          
            if ! git pull --rebase origin "$BRANCH"; then
              echo "[WARN] Pull with rebase failed"
              COUNT=$((COUNT + 1))
              sleep 2
              continue
            fi
          
            # Only modify file AFTER successful rebase
            if ! grep -qxF "$GSF_VERSION" "$FILE"; then
              echo "$GSF_VERSION" >> "$FILE"
              git add "$FILE"
              git commit -m "Announced ${GSF_ENV} ${GSF_VERSION}"
            else
              echo "[INFO] Version already in file, skipping commit and push"
              SUCCESS=true
              break
            fi
          
            if git push origin "$BRANCH"; then
              echo "[INFO] Push succeeded"
              SUCCESS=true
              break
            else
              echo "[WARN] Push failed, likely due to concurrent change. Resetting..."
              git reset --hard HEAD~1      # Roll back the commit
              git clean -fd                # Discard untracked files, if any
              COUNT=$((COUNT + 1))
              sleep 2
            fi
          done

          if [ "$SUCCESS" = false ]; then
            echo "Failed to push after $MAX_RETRIES attempts"
            exit 1
          fi
