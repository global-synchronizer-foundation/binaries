name: Check SVS majority and Announce

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      info_url:
        required: true
        type: string
      validator_operators_group_id:
        required: false
        type: string
        default: "133138"  # Default group ID for validator operators
    secrets:
      SLACK_WEBHOOK_URL:
        required: true
      GROUPS_IO_USER:
        required: true
      GROUPS_IO_PASS:
        required: true

permissions: {}

jobs:
  check-and-announce:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          path: main

      - name: Checkout announce-tracking branch
        uses: actions/checkout@v4
        with:
          ref: announce-tracking
          path: tracking

      - name: Get GSF version and docs path
        id: version
        run: |
          GSF_VERSION=$(curl -sSm5 "${{ inputs.info_url }}/info" | jq -r .sv.version)
          GSF_DOCS=$(echo "${{ inputs.info_url }}" | sed 's/global.canton.network.//')
          echo "GSF_VERSION=$GSF_VERSION" >> $GITHUB_ENV
          echo "GSF_DOCS=$GSF_DOCS" >> $GITHUB_ENV

      - name: Run SVS majority check
        id: check-majority
        run: |
          chmod +x ./main/ci/check-svs-majority.sh
          result=$(./main/ci/check-svs-majority.sh "${{ inputs.environment }}" "${{ inputs.info_url }}")
          echo "$result"

          {
            echo '```'
            echo "$result"
            echo '```'
          } >> "$GITHUB_STEP_SUMMARY"

        env:
          GITHUB_OUTPUT: $GITHUB_OUTPUT

      - name: Check if version already announced
        id: check-announced
        run: |
          ENV_LOWER=$(echo "${{ inputs.environment }}" | tr '[:upper:]' '[:lower:]')
          FILE="tracking/ci/announced-${ENV_LOWER}.txt"
          if [ -f "$FILE" ] && grep -q "${{ env.GSF_VERSION }}" "$FILE"; then
            echo "already_announced=true" >> $GITHUB_OUTPUT
            echo "Version ${{ env.GSF_VERSION }} has already been announced for ${{ inputs.environment }}."
            echo "Version ${{ env.GSF_VERSION }} has already been announced for ${{ inputs.environment }}." >> $GITHUB_STEP_SUMMARY
          else
            echo "already_announced=false" >> $GITHUB_OUTPUT
            echo "Version ${{ env.GSF_VERSION }} has not been announced for ${{ inputs.environment }}."
            echo "Version ${{ env.GSF_VERSION }} has not been announced for ${{ inputs.environment }}." >> $GITHUB_STEP_SUMMARY
          fi

      # Copying binaries for DevNet only
      - name: Set up tools
        if: ${{ inputs.environment == 'DevNet' && steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false' }}
        run: |
          sudo apt-get update
          sudo apt-get install -y jq skopeo make
          curl -fsSL -o /tmp/get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          chmod 700 /tmp/get_helm.sh
          /tmp/get_helm.sh

      - name: Run copy-binaries Script
        if: ${{ inputs.environment == 'DevNet' && steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false' }}
        run: |
          chmod +x ./main/ci/gsf-copy-binaries.sh && ./main/ci/gsf-copy-binaries.sh

      # Announcing the release for all environments
      - name: Announce the release to validator-operators
        if: steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false'
        uses: slackapi/slack-github-action@b0fa283ad8fea605de13dc3f449259339835fc52 #v2.1.0
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          webhook-type: incoming-webhook
          payload: |
            text: "Splice release ${{ env.GSF_VERSION }} is ready for deployment on ${{ inputs.environment }}"
            blocks:
              - type: "section"
                text:
                  type: "mrkdwn"
                  text: |
                    :tada: Splice release `${{ env.GSF_VERSION }}` is ready for deployment on ${{ inputs.environment }}, and is available from the GSF
                    :ship: â…” of Super Validator nodes have upgraded to this release, including the GSF Super Validator node
                    *SV node status here*: https://sync.global/sv-network
                    *Release notes here*: ${{ env.GSF_DOCS }}/release_notes.html

      - name: Announce to validator-announce@lists.sync.global
        if: steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false'
        env:
          VALIDATOR_OPERATORS_GROUP_ID: ${{ inputs.validator_operators_group_id }}
          GROUPS_IO_USER: ${{ secrets.GROUPS_IO_USER }}
          GROUPS_IO_PASS: ${{ secrets.GROUPS_IO_PASS }}
          GSF_ENVIRONMENT: ${{ inputs.environment }}
        run: |
          trap 'rm -f password.txt cookies.txt message.html' EXIT

          curl_options=(-fsS)
          echo "password=$GROUPS_IO_PASS" > password.txt

          echo "Logging in to groups.io"
          LOGIN_RESPONSE_COOKIES=$(
            curl "${curl_options[@]}" -X POST \
              "https://lists.sync.global/api/v1/login" \
              -c "cookies.txt" \
              -d "email=$GROUPS_IO_USER" \
              -d @password.txt
          )

          CSRF_TOKEN=$(echo "$LOGIN_RESPONSE_COOKIES" | jq -er '.user.csrf_token')
          echo "CSRF Token: $CSRF_TOKEN"

          echo "Creating a new draft"
          DRAFT_ID=$(
            curl "${curl_options[@]}" -X POST \
              "https://lists.sync.global/api/v1/newdraft" \
              -b "cookies.txt" \
              -d "csrf=$CSRF_TOKEN" \
              -d "draft_type=draft_type_post" \
              -d "group_id=$VALIDATOR_OPERATORS_GROUP_ID" |
            jq -er '.id'
          )
          echo "Draft ID: $DRAFT_ID"

          VERSION=$GSF_VERSION envsubst < ./main/ci/splice_release_message.html.template > message.html
          ENVIRONMENT=$GSF_ENVIRONMENT envsubst < message.html > message.html
          DOCS=$GSF_DOCS envsubst < message.html > message.html

          echo "Updating draft with message content"
          curl "${curl_options[@]}" -X POST \
            "https://lists.sync.global/api/v1/updatedraft" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -b "cookies.txt" \
            -d "csrf=$CSRF_TOKEN" \
            -d "draft_id=$DRAFT_ID" \
            -d "group_id=$VALIDATOR_OPERATORS_GROUP_ID" \
            -d "subject=Splice release ${{ env.GSF_VERSION }} is ready for deployment on ${{ inputs.environment }}" \
            --data-urlencode "body@message.html"

          echo "Posting the draft"
          curl "${curl_options[@]}" -X POST \
            "https://lists.sync.global/api/v1/postdraft" \
            -b "cookies.txt" \
            -d "csrf=$CSRF_TOKEN" \
            -d "draft_id=$DRAFT_ID" \
            -d "group_id=$VALIDATOR_OPERATORS_GROUP_ID"

      - name: Update announced version file
        if: steps.check-majority.outputs.svs_majority == 'true' && steps.check-announced.outputs.already_announced == 'false'
        run: |
          cd tracking
          ENV_LOWER=$(echo "${{ inputs.environment }}" | tr '[:upper:]' '[:lower:]')
          FILE="./ci/announced-${ENV_LOWER}.txt"
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

          MAX_RETRIES=5
          COUNT=0
          SUCCESS=false

          while [ $COUNT -lt $MAX_RETRIES ]; do
            git pull --rebase origin announce-tracking
            echo "${{ env.GSF_VERSION }}" >> "$FILE" && \
            git add "$FILE" && \
            git commit -m "Announced ${{ inputs.environment }} ${{ env.GSF_VERSION }}" && \
            git push origin announce-tracking && SUCCESS=true && break
            COUNT=$((COUNT + 1))
            echo "Retrying push... attempt $COUNT"
            sleep 2
          done
          if [ "$SUCCESS" = false ]; then
            echo "Failed to push after $MAX_RETRIES attempts"
            exit 1
          fi